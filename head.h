#pragma once
int P1_1();
int P1_2();
int P1_3();
int P2_1();
int P2_2();
int P2_3();
int P2_4();
int P2_5();
int P2_6();
int P2_7();
int P2_8(); 
int P2_9();
int P2_10();
int P2_11();
int P2_12();
int P2_13();
int P2_14();
int P2_15();
int P2_16();
int P2_17();
int P2_18();
int p3_1();
int p3_2();
int p3_3();
int p3_4();
int p3_5();
int p3_6();
int p3_7();
int p3_8();
int p3_9();
int p3_10();
int p3_11();
int p3_12();
int p3_13();
int p3_14();
int p3_15();
void paixu();
void jinzita();
void add_n();
void daojinzi();
void zhijiao();
void printcalendar(int Theyear, int Themonth, int TheFirstDay, int TheDaysOfThisMonth);
int GetNextMonthFirstDayIsWhatDay(int nWhatDay, int nDaysOfMonth);
void PrintYourCalendar_yourmonth();
void PrintYourCalendar_year();
int maopao();
void exchange_1(int &a, int&b);
void exchange_2(int* a, int *b);
void exchange_3(int* &i, int *&j);
void exchange_4(int**a, int **b);
void print_negative_number();
int MyStrLen(char *p);
void MyStrCat(char *const p1, char const *p2);
void MyStrCpy(char *const p1, char * p2);
void MyStrReverse(char * const p);
int MyStrCompare(char *p1, char *p2);
void EraseDigital(char*p);
int Reverse1(int val);
float Reverse1(float val);
double Reverse1(double val);
template<class T>
T Reverse1(T val);
int Reverse2(int val);
void Bit(int val, char *pArry);
void Bit(float val, char *pArry);
void Bit(double val, char *pArry);
template<class T>
T Bit(T val, char*pArry);
void homework_7();
void homework_6();
void homework_5();
void transpose(int *p, int m, int n);
int homework8();
struct Student
{
	char cName[32];
	char cID[17];
	int nSocres[3];
	struct Student *next;
}; typedef struct Student CStu;
CStu *CreatLinkerFromFile(const char *pFilename);
void DeleteLinkers(CStu *pHeader);
bool DeleteStuByName(CStu *pH, const char*pName, int nFlag);
bool InsertNewStu(CStu *pH, const char *pName, int nFlag);
void SortBycID(CStu *pH);
void SortBycName(CStu *pH);
void SortByScore(CStu *pH);
void SortByScore(CStu *pH, int nFlag);
void ReverseLinkers(CStu *pH);
void CopyLinkers(CStu *pH);
void Sort(CStu *pH, bool ascend, int nFlag);
int homework9();
int homework10();
int p5();
int p6();
int p4();
int p1();
int p2();
int p3();
int p7();